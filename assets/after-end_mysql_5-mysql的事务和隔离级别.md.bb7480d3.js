import{_ as a,o as s,c as e,V as l}from"./chunks/framework.f4d827d1.js";const y=JSON.parse('{"title":"mysql 事务和隔离级别","description":"","frontmatter":{},"headers":[],"relativePath":"after-end/mysql/5-mysql的事务和隔离级别.md","filePath":"after-end/mysql/5-mysql的事务和隔离级别.md","lastUpdated":1691124876000}'),n={name:"after-end/mysql/5-mysql的事务和隔离级别.md"},o=l(`<h1 id="mysql-事务和隔离级别" tabindex="-1">mysql 事务和隔离级别 <a class="header-anchor" href="#mysql-事务和隔离级别" aria-label="Permalink to &quot;mysql 事务和隔离级别&quot;">​</a></h1><p>修改多个表的时候，如果表的数据是有关联的，事务是必须的。要不全部成功，要不全部不成功。</p><h2 id="开启事务" tabindex="-1">开启事务 <a class="header-anchor" href="#开启事务" aria-label="Permalink to &quot;开启事务&quot;">​</a></h2><p><code>START TRANSACTION</code> 开启事务后所有的 <code>sql</code> 语句都可以 <code>ROLLBACK</code> ，除非执行了 <code>COMMIT</code> 完成这段事务。</p><div class="language-SQL"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">START TRANSACTION</span></span></code></pre></div><h2 id="回退-sql" tabindex="-1">回退 SQL <a class="header-anchor" href="#回退-sql" aria-label="Permalink to &quot;回退 SQL&quot;">​</a></h2><div class="language-SQL"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">ROLLBACK</span></span></code></pre></div><h2 id="提交-sql" tabindex="-1">提交 SQL <a class="header-anchor" href="#提交-sql" aria-label="Permalink to &quot;提交 SQL&quot;">​</a></h2><div class="language-SQL"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">COMMIT</span></span></code></pre></div><h2 id="回退部分-sql" tabindex="-1">回退部分 SQL <a class="header-anchor" href="#回退部分-sql" aria-label="Permalink to &quot;回退部分 SQL&quot;">​</a></h2><p>可以设置几个 <code>SAVEPOINT</code> ，这样可以 <code>ROLLBACK TO</code> 任何一个 <code>SAVEPOINT</code> 的位置。</p><div class="language-SQL"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">START TRANSACTION</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">SAVEPOINT aaa;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">UPDATE</span><span style="color:#A6ACCD;"> order_items </span><span style="color:#F78C6C;">SET</span><span style="color:#A6ACCD;"> quantity</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> order_id</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">SAVEPOINT bbb;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">UPDATE</span><span style="color:#A6ACCD;"> orders </span><span style="color:#F78C6C;">SET</span><span style="color:#A6ACCD;"> total_amount</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">200</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">SAVEPOINT ccc;</span></span></code></pre></div><p>回滚到 bbb 的位置：</p><div class="language-SQL"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">ROLLBACK</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TO</span><span style="color:#A6ACCD;"> SAVEPOINT bbb;</span></span></code></pre></div><h2 id="事务的隔离级别" tabindex="-1">事务的隔离级别 <a class="header-anchor" href="#事务的隔离级别" aria-label="Permalink to &quot;事务的隔离级别&quot;">​</a></h2><p>MYSQL 有 4 种事务隔离级别：</p><h3 id="_1-read-uncommitted-可以读到别的事务尚未提交的数据" tabindex="-1">1.READ UNCOMMITTED：可以读到别的事务尚未提交的数据 <a class="header-anchor" href="#_1-read-uncommitted-可以读到别的事务尚未提交的数据" aria-label="Permalink to &quot;1.READ UNCOMMITTED：可以读到别的事务尚未提交的数据&quot;">​</a></h3><blockquote><p>有个问题，这个事务内第一次读的数据是 aaa，下次读可能就是 bbb 了，这个问题叫做不可重复读。万一你读到的数据人家又回滚了，那你读到的就是临时数据，这个问题叫做脏读。</p></blockquote><h3 id="_2-read-committed-只读取别的事务已提交的数据" tabindex="-1">2.READ COMMITTED：只读取别的事务已提交的数据 <a class="header-anchor" href="#_2-read-committed-只读取别的事务已提交的数据" aria-label="Permalink to &quot;2.READ COMMITTED：只读取别的事务已提交的数据&quot;">​</a></h3><blockquote><p>不会督读到临时数据，不会存在脏读问题。但是还是可能存在不可重复度的问题。还有可能不只是数据不一样，可能两次读取到的记录行数也不一样，叫幻读。</p></blockquote><h3 id="_3-repeatable-read-在同一事务内-多次读取数据将保证结果相同。" tabindex="-1">3.REPEATABLE READ：在同一事务内，多次读取数据将保证结果相同。 <a class="header-anchor" href="#_3-repeatable-read-在同一事务内-多次读取数据将保证结果相同。" aria-label="Permalink to &quot;3.REPEATABLE READ：在同一事务内，多次读取数据将保证结果相同。&quot;">​</a></h3><blockquote><p>这个级别保证了读取到的数据一样，但是不保证行数一样，也就是说解决了不可重复读的问题，但仍然存在幻读的问题。</p></blockquote><h3 id="_4-serializable-在同一时间只允许一个事务修改数据。" tabindex="-1">4.SERIALIZABLE：在同一时间只允许一个事务修改数据。 <a class="header-anchor" href="#_4-serializable-在同一时间只允许一个事务修改数据。" aria-label="Permalink to &quot;4.SERIALIZABLE：在同一时间只允许一个事务修改数据。&quot;">​</a></h3><blockquote><p>没有问题，但是性能很差。</p></blockquote><p>这 4 种级别主要是数据一致性和性能的差别，一致性越好，并发性能就越差。默认为 <code>REPEATABLE READ</code> 级别</p><p>查询当前的事务隔离级别：</p><div class="language-SQL"><button title="Copy Code" class="copy"></button><span class="lang">SQL</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> @@transaction_isolation</span></span></code></pre></div>`,27),t=[o];function p(c,r,i,d,C,A){return s(),e("div",null,t)}const b=a(n,[["render",p]]);export{y as __pageData,b as default};
